from system use makeThread, currentFiber, println, now;

func fib(n){
  if(n < 0){
     return -10000;
  }
  elif(n == 0){
     return 0;
  }
  elif((n == 1) || (n == 2)){
     return 1;
  }
  else{
     return fib(n-1) + fib(n-2);
  }
}

const measuresArr := [];
const measureStart := [];

func threadMeasure() {
  var threadCount := 10;
  while(threadCount > 0) {
    const start := now();
    const t := makeThread( func:foo(){
      fib(28);
      measureStart.add(now() - currentFiber().priorStartTime);
      println("Thread Start Times (in ns): "+measureStart.toString());
    });

    measuresArr.add(now() - start);

    t.priorStartTime = now();
    t.start();
    threadCount -= 1;
  }

  println("Thread Creation Times (in ns): "+measuresArr.toString());
}

threadMeasure();




