use system:println, now;
//use verysimple;

func fibSlow(n){
  if(n < 0){
     return -10000;
  }
  elif(n = 0){
     return 0;
  }
  elif((n = 1) || (n = 2)){
     return 1;
  }
  else{
     return fibSlow(n-1) + fibSlow(n-2);
  }
}

func fib(n){
  const arr := [0,1,1];
  //system.println("init ARR "+arr);
 
  if(n <= 2){
    return arr[n];
  }
  else {
    var index := 3;
    while(index <= n){
      //system.println(" ==> cycle: "+index+" | "+(index - 1)+" | "+(index - 2)+" | ARR: "+arr);
    	arr.add(arr[index - 1] + arr[index - 2]);
    	index += 1;
    }
    
    //system.println("ARR: "+arr);
    return arr[n];
  }
}

/*
var start := now();
const value := fib(28);
const fastElasped := now() - start;


const start := now();
const valueSlow := fibSlow(28);
const slowElasped := now() - start;


println("Result: "+value+" @ "+fastElasped+" ns | slow "+valueSlow+" @ "+slowElasped+" ns | "+(value = valueSlow));
*/

//println("Result: slow "+valueSlow+" @ "+slowElasped+" ns | ");

const startF := now();
const value := fibSlow(28);
const endF := now();
println("*** fibSlow(28) Time: "+(endF - startF));
println("Result: "+value);
